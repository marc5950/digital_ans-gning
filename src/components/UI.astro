<section id="ui" class="ui wrapper flex-col">
  <h2>UI</h2>
  <div class="ui-grid">
    <!-- Barchart - Medium stÃ¸rrelse -->
    <div class="ui-item medium">
      <div class="ui-header">
        <h3>Live Data Visualization</h3>
        <p>Animeret bar chart med real-time data</p>
      </div>
      <div class="ui-content">
        <div class="barchart">
          <ul></ul>
        </div>
      </div>
    </div>

    <!-- Color Picker - Small stÃ¸rrelse -->
    <div class="ui-item small">
      <div class="ui-header">
        <h3>Color Picker</h3>
        <p>Interaktiv farve-vÃ¦lger</p>
      </div>
      <div class="ui-content">
        <div class="color-picker">
          <label class="visually-hidden" for="colorInput">VÃ¦lg en farve:</label>
          <input type="color" id="colorInput" value="#8e2de2" />
          <div class="color-display" id="colorDisplay"></div>
          <span class="color-value" id="colorValue">#8e2de2</span>
        </div>
      </div>
    </div>

    <!-- Button Showcase - Small stÃ¸rrelse -->
    <div class="ui-item small">
      <div class="ui-header">
        <h3>Button States</h3>
        <p>Hover & click effekter</p>
      </div>
      <div class="ui-content">
        <div class="button-showcase">
          <button class="demo-btn primary">Primary</button>
          <button class="demo-btn secondary">Secondary</button>
          <button class="demo-btn outline">Outline</button>
        </div>
      </div>
    </div>

    <!-- Progress Bar - Medium stÃ¸rrelse -->
    <div class="ui-item medium">
      <div class="ui-header">
        <h3>Progress Animation</h3>
        <p>Animeret progress bar med steps</p>
      </div>
      <div class="ui-content">
        <div class="progress-demo">
          <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="progress-steps">
            <div class="step active">Design</div>
            <div class="step">Development</div>
            <div class="step">Testing</div>
            <div class="step">Deploy</div>
          </div>
          <div class="progress-btn-wrapper">
            <button class="progress-btn" id="progressBtn">Start Progress</button
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Card Hover Effect - Large stÃ¸rrelse -->
    <div class="ui-item large">
      <div class="ui-header">
        <h3>Card Interactions</h3>
        <p>Hover effects & micro-animations</p>
      </div>
      <div class="ui-content">
        <div class="card-demo">
          <div class="demo-card gradient">
            <div class="card-icon">ðŸš€</div>
            <h4>Gradient Card</h4>
            <p>Se hvad der sker nÃ¥r du hoverer over dette kort</p>
            <span class="divider"></span>
            <div class="card-stats">
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">Performance</span>
              </span>
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">Accessibility</span>
              </span>
            </div>
          </div>
          <div class="demo-card neon">
            <div class="card-icon">âš¡</div>
            <h4>Neon Glow</h4>
            <p>Cyberpunk-inspireret neon effekt</p>
            <span class="divider neon-divider"></span>
            <div class="card-stats">
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">Innovation</span>
              </span>
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">Creativity</span>
              </span>
            </div>
          </div>
          <div class="demo-card glass">
            <div class="card-icon">âœ¨</div>
            <h4>Glass Effect</h4>
            <p>Moderne glasmorphism design med blur</p>
            <span class="divider glass-divider"></span>
            <div class="card-stats">
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">Best Practices</span>
              </span>
              <span class="stat">
                <span class="value">100%</span>
                <span class="label">SEO</span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <style>
      /* UI Grid Layout */
      .ui-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
      }

      /* Accessibility */
      .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }

      .ui-item {
        display: flex;
        flex-direction: column;
        background: var(--background-color);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--border-radius);
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      }

      .ui-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 30px rgba(142, 45, 226, 0.15);
        border-color: rgba(142, 45, 226, 0.3);
      }

      /* Grid Item Sizes */
      .ui-item.small {
        grid-column: span 1;
      }

      .ui-item.medium {
        grid-column: span 2;
      }

      .ui-item.large {
        grid-column: span 3;
      }

      /* Responsive grid */
      @media (max-width: 1200px) {
        .ui-item.large {
          grid-column: span 2;
        }
      }

      @media (max-width: 768px) {
        .ui-grid {
          grid-template-columns: 1fr;
        }
        .ui-item.small,
        .ui-item.medium,
        .ui-item.large {
          grid-column: span 1;
        }
      }

      /* UI Item Content */
      .ui-header {
        padding: 1rem 1rem 0.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .ui-header h3 {
        margin: 0 0 0.25rem 0;
        font-size: 1rem;
        color: var(--text-color);
      }

      .ui-header p {
        margin: 0;
        font-size: 0.75rem;
        color: var(--secondary-color);
      }

      .ui-content {
        padding: 1rem;
        flex: 1 1 0;
      }

      /* Color Picker */
      .color-picker {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.75rem;
      }

      .color-picker input[type="color"] {
        width: 60px;
        height: 60px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        border: 3px solid var(--text-color);
        background: none;
        padding: 0;
        overflow: hidden;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
      }

      .color-picker input[type="color"]::-webkit-color-swatch-wrapper {
        padding: 0;
        border: none;
        border-radius: 50%;
      }

      .color-picker input[type="color"]::-webkit-color-swatch {
        border: none;
        border-radius: 50%;
      }

      .color-picker input[type="color"]::-moz-color-swatch {
        border: none;
        border-radius: 50%;
      }

      .color-display {
        width: 100%;
        height: 30px;
        border-radius: 6px;
        background: var(--primary-color);
        transition: background 0.3s ease;
      }

      .color-value {
        font-family: var(--font-mono);
        font-size: 0.875rem;
        color: var(--text-color);
      }

      /* Button Showcase */
      .button-showcase {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .demo-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        border: 2px solid;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .demo-btn.primary {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .demo-btn.primary:hover {
        background: transparent;
        color: var(--primary-color);
      }

      .demo-btn.secondary {
        background: var(--text-color);
        color: var(--background-color);
        border-color: var(--text-color);
      }

      .demo-btn.secondary:hover {
        background: transparent;
        color: var(--text-color);
      }

      .demo-btn.outline {
        background: transparent;
        color: var(--text-color);
        border-color: var(--secondary-color);
      }

      .demo-btn.outline:hover {
        background: var(--text-color);
        color: var(--background-color);
        border-color: var(--text-color);
      }

      button:hover {
        transform: scale(1.05);
      }

      /* Progress Demo */
      .progress-demo {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        height: 100%;
      }

      .progress-bar {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        width: 0%;
        background: linear-gradient(90deg, var(--primary-color), #4a90e2);
        transition: width 0.3s ease;
      }

      .progress-steps {
        cursor: default;
        display: flex;
        justify-content: space-between;
        gap: 0.5rem;
      }

      .step {
        flex: 1;
        text-align: center;
        padding: 0.5rem;
        font-size: 0.75rem;
        color: var(--secondary-color);
        border-radius: 4px;
        transition: all 0.3s ease;
      }

      .step.active {
        background: var(--primary-color);
        color: white;
      }

      .progress-btn-wrapper {
        display: flex;
        flex: 1 1 0;
      }
      .progress-btn {
        align-self: flex-end;
        padding: 0.5rem 1rem;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.875rem;
        transition: all 0.3s ease;
      }

      .progress-btn:hover {
        background: #7a1cc7;
        transform: translateY(-1px);
      }

      /* Card Demo */
      .card-demo {
        display: flex;
        gap: 1.5rem;
        justify-content: center;
        flex-wrap: wrap;
      }

      /* Base card styles */
      .demo-card {
        color: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        text-align: center;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        max-width: 200px;
        min-width: 180px;
        flex: 1;
        position: relative;
        overflow: hidden;
      }

      /* Responsive card sizing */
      @media (max-width: 768px) {
        .card-demo {
          flex-direction: column;
          align-items: center;
        }

        .demo-card {
          max-width: 280px;
          width: 100%;
        }
      }

      @media (max-width: 480px) {
        .demo-card {
          min-width: unset;
          padding: 1.25rem;
        }
      }

      /* Gradient Card */
      .demo-card.gradient {
        background: linear-gradient(135deg, var(--primary-color), #4a90e2);
      }

      .demo-card.gradient:hover {
        transform: scale(1.05) rotate(-1deg);
        box-shadow: 0 15px 35px rgba(142, 45, 226, 0.4);
      }

      .demo-card.gradient:hover .card-icon {
        transform: scale(1.2) rotate(10deg);
      }

      /* Glass Effect Card */
      .demo-card.glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      }

      .demo-card.glass::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          45deg,
          transparent,
          rgba(255, 255, 255, 0.1),
          transparent
        );
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .demo-card.glass:hover {
        transform: translateY(-8px) rotateX(5deg);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        border-color: rgba(255, 255, 255, 0.4);
      }

      .demo-card.glass:hover::before {
        opacity: 1;
      }

      .demo-card.glass:hover .card-icon {
        transform: scale(1.1) rotateY(180deg);
      }

      /* Neon Effect Card */
      .demo-card.neon {
        background: linear-gradient(135deg, #0f0f0f, #1a1a2e);
        border: 2px solid #00ffff;
        box-shadow:
          0 0 10px #00ffff,
          inset 0 0 10px rgba(0, 255, 255, 0.1);
        color: #00ffff;
        text-shadow: 0 0 10px #00ffff;
      }

      .demo-card.neon:hover {
        transform: scale(1.03) translateY(-5px);
        border-color: #ff00ff;
        box-shadow:
          0 0 10px #ff00ff,
          0 0 20px #ff00ff,
          inset 0 0 5px rgba(255, 0, 255, 0.2);
        color: #ff00ff;
        text-shadow: 0 0 15px #ff00ff;
      }

      .demo-card.neon:hover .card-icon {
        transform: scale(1.3) rotate(-15deg);
        filter: drop-shadow(0 0 10px #ff00ff);
      }

      .demo-card.neon .card-stats .value,
      .demo-card.neon .card-stats .label {
        transition: all 0.3s ease;
      }

      .demo-card.neon:hover .card-stats .value,
      .demo-card.neon:hover .card-stats .label {
        color: #ff00ff;
        text-shadow: 0 0 10px #ff00ff;
      }

      .card-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        transition: transform 0.3s ease;
      }

      .demo-card h4 {
        margin: 0 0 0.5rem 0;
        font-size: 1rem;
      }

      .demo-card p {
        margin: 0 0 1rem 0;
        font-size: 0.875rem;
        opacity: 0.9;
      }

      .divider {
        display: block;
        height: 2px;
        margin: 1rem auto;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.482),
          transparent
        );
      }

      .glass-divider {
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.6),
          transparent
        );
        box-shadow: 0 1px 3px rgba(255, 255, 255, 0.2);
      }

      .neon-divider {
        background: linear-gradient(90deg, transparent, #00ffff, transparent);
        box-shadow: 0 0 10px #00ffff;
        transition: all 0.3s ease;
      }

      .demo-card.neon:hover .neon-divider {
        background: linear-gradient(90deg, transparent, #ff00ff, transparent);
        box-shadow: 0 0 15px #ff00ff;
      }
      .card-stats {
        display: flex;
        justify-content: space-around;
      }

      .stat {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .value {
        font-size: 1.25rem;
        font-weight: bold;
      }

      .label {
        font-size: 0.75rem;
        opacity: 0.8;
      }
    </style>
    <style is:global>
      /* Barchart */
      .barchart {
        height: 100%;
        min-height: 100px;
      }
      .barchart ul {
        list-style: none;
        display: flex;
        align-items: flex-end;
        gap: 0.75rem;
        block-size: 100%;
        padding: 0;
        margin: 0;
      }

      @media (max-width: 600px) {
        .barchart ul {
          gap: 0.5rem !important;
        }
      }

      .barchart li {
        opacity: 0.5;
        inline-size: 3ch;
        border-radius: var(--border-radius);
        height: calc(var(--height) * 1px);
        background: color-mix(
          in hsl,
          var(--primary-color),
          greenyellow calc(var(--height) * 1%)
        );
      }
    </style>
    <script>
      // Barchart
      const barchartList = document.querySelector(".barchart ul");

      if (barchartList) {
        // Array til at gemme tal
        const barchartArr: number[] = [];

        // opdaterer listen hvert 200ms
        const barchartInterval = setInterval(updateBarchart, 200);

        // funktion til at opdatere listen
        function updateBarchart() {
          if (!barchartList) return;

          // rydder listen
          barchartList.innerHTML = "";
          // tilfÃ¸jer et nyt random tal til arrayet
          barchartArr.push(Math.floor(Math.random() * 100) + 1);
          // hvis arrayet er lÃ¦ngere end 20 fjernes det Ã¦ldste tal
          if (barchartArr.length === 21) {
            barchartArr.shift();
          }
          // laver et li element for hvert tal i arrayet
          barchartArr.forEach((num) => {
            const li = document.createElement("li");
            li.style.setProperty("--height", num.toString());
            // tilfÃ¸j li elementet til listen som et barn til barchartList (ul)
            barchartList.appendChild(li);
          });
        }

        // Cleanup nÃ¥r siden forlades
        window.addEventListener("beforeunload", () => {
          clearInterval(barchartInterval);
        });
      }

      // Color Picker
      const colorInput = document.getElementById("colorInput");
      const colorDisplay = document.getElementById("colorDisplay");
      const colorValue = document.getElementById("colorValue");

      if (colorInput && colorDisplay && colorValue) {
        colorInput.addEventListener("input", (e) => {
          const target = e.target;
          if (target && target instanceof HTMLInputElement) {
            const color = target.value;
            colorDisplay.style.background = color;
            colorValue.textContent = color;
          }
        });
      }

      if (colorInput && colorDisplay && colorValue) {
        colorInput.addEventListener("input", (e) => {
          const target = e.target;
          if (target && target instanceof HTMLInputElement) {
            const color = target.value;
            colorDisplay.style.background = color;
            colorValue.textContent = color;
          }
        });
      }

      // Progress Bar
      const progressBtn = document.getElementById("progressBtn");
      const progressFill = document.getElementById("progressFill");

      if (progressBtn && progressFill) {
        let isRunning = false;

        progressBtn.addEventListener("click", () => {
          if (isRunning) return;

          isRunning = true;
          progressBtn.textContent = "Running...";
          if (progressBtn instanceof HTMLButtonElement) {
            progressBtn.disabled = true;
          }

          let progress = 0;
          const steps = document.querySelectorAll(".step");

          // Reset
          steps.forEach((step) => step.classList.remove("active"));
          progressFill.style.width = "0%";

          const interval = setInterval(() => {
            progress += 1;
            progressFill.style.width = progress + "%";

            // Update step indicators
            const stepIndex = Math.floor((progress - 1) / 25);
            if (stepIndex >= 0 && stepIndex < steps.length) {
              steps[stepIndex].classList.add("active");
            }

            if (progress >= 100) {
              clearInterval(interval);
              setTimeout(() => {
                isRunning = false;
                progressBtn.textContent = "Start Progress";
                if (progressBtn instanceof HTMLButtonElement) {
                  progressBtn.disabled = false;
                }

                // Reset after delay
                setTimeout(() => {
                  steps.forEach((step) => step.classList.remove("active"));
                  steps[0].classList.add("active");
                  progressFill.style.width = "0%";
                }, 2000);
              }, 1000);
            }
          }, 50);
        });
      }

      // Toggle Switch
      const toggleInput = document.getElementById("toggleInput");
      const toggleLabel = document.getElementById("toggleLabel");

      if (toggleInput && toggleLabel) {
        toggleInput.addEventListener("change", (e) => {
          const target = e.target;
          if (target && target instanceof HTMLInputElement) {
            toggleLabel.textContent = target.checked ? "On" : "Off";
          }
        });
      }
    </script>
  </div>
</section>
